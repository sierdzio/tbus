#!/bin/bash
# tbus-add can be used to create .torrent files from given data.
# It can update old files or add completely new ones.
if [ "${1}" = "-h" ] || [ "${1}" = "--help" ]; then
  echo "tbus-add [option] files and directories

If you specify a directory, or multiple files, tbus will create single
.torrent file for all that data, unless you pass --separate (-s).

Options:
  -h or --help - display this message
  -o or --output - specify output directory/ filename. If omitted, tbus will
\tTry to fit it into current structure of the repository
  -s or --separate - create a separate .torrent file for all input files
  -d or --dont-overwrite - if output file already exists, tbus will ask
\t for a different name
  -c or --comment - add given comment to all generated torrent files"
  exit
fi

# Parse command line arguments
INPUT=()
OUTPUT="-1"
COMMENT="-1"
SEPARATE=false
OVERWRITE=true

while [ -n "${1}" ] ; do
  case "${1}" in
    --output | -o)
      OUTPUT="${2}"
      shift 2
      ;;
    --separate | -s)
      SEPARATE=true
      shift
      ;;
    --dont-overwrite | -d)
      OVERWRITE=false
      shift
      ;;
    --comment | -c)
      COMMENT="${2}"
      shift 2
      ;;
    *)
      INPUT+=(${1})
      shift
      ;;
  esac
done

testParsing ()
{
  echo "Test: OUTPUT="$OUTPUT", SEPARATE="$SEPARATE", OVERWRITE="$OVERWRITE", COMMENT="$COMMENT
  echo "Array size: ${#INPUT[*]}"

  for item in ${INPUT[*]}
  do
    echo $item
  done
}

if [ ${#INPUT[*]} == 0 ]; then
  echo "No input file specified, bailing out"
  exit
fi

# Uncomment to display parser output data
#testParsing

addTorrent ()
{
  comment="$1"
  output="$2"
  input="$3"
  overwrite="$4"

  OUTPUTFILENAME=""
  if [[ $output != *.torrent ]]; then
  OUTPUTFILENAME=$output".torrent"
  fi

  if [ -f "$OUTPUTFILENAME" ]; then
    if [ $overwrite == true ]; then
      rm $OUTPUTFILENAME
    else
      echo "Output file "$OUTPUTFILENAME" already exists. To overwrite, don't use -d option"
      exit 1
    fi
  fi

  arguments=""

  if [ "$comment" != "-1" ]; then
    arguments=" -c "$comment
  fi

  if [ "$output" == "-1" ]; then
    $output=${input[1]}
  fi

  arguments=$arguments" -o "$output" "$input

  echo "transmission-create"$arguments
}


if [ $SEPARATE == true ]; then
  for item in ${INPUT[*]}
  do
    addTorrent "$COMMENT" "$OUTPUT" "$item" "$OVERWRITE"
  done
else
  INPUTSTRING=""
  for item in ${INPUT[*]}
  do
    INPUTSTRING=$item" "$INPUTSTRING
  done
  addTorrent "$COMMENT" "$OUTPUT" "$INPUTSTRING" "$OVERWRITE"
fi
