#!/bin/bash
# tbus-user can be used to manage authorised users (committers).
help () {
  echo "tbus-user
tbus-user can be used to manage authorised users (committers). You will need to
authorise all operations with a valid signature.

Options:
  - add (email) - add new user. You need to specify GPG signing key ID
  - modify (old email) (new email) - modify an existing user
  - change (old email) (new email) - same as modify
  - remove (email) - remove an user
  - delete (email) - same as remove"
  exit
}

if [ "${1}" = "-h" ] || [ "${1}" = "--help" ] || [ -z "${2}" ]; then
  help
  exit
fi

# TODO: Also check authorisation while signing the commit
# TODO: Export this so that it can be used in other scripts
# TODO: Make it more intelligent when it comes to paths (use tbus-info or dirname "${0}")
authenticate () {
  echo "Please sign-in using your GPG account. Please make sure to log into
a valid GPG account (found in pubkeys directory)"
  while true; do
    read -p "Login:" login
    if [ -f "pubkeys/$login.asc" ]; then
      break
    else
      echo "Not a valid user, please try again"
    fi
  done

  rm -f gpgsigned.txt gpgtest.txt
  echo "gpg login test" > gpgtest.txt
  gpg -u "$login" --output gpgsigned.txt --sign gpgtest.txt
  rm -f gpgsigned.txt gpgtest.txt
  echo "Login successful"
}

if [ "${1}" = "add" ]; then
  authenticate
  gpg --export "${2}" > pubkeys/"${2}".asc
  exit
fi

if [ "${1}" = "modify" ] || [ "${1}" = "change" ]; then
  if [ -z "${2}"]; then
    echo "Too few arguments"
    exit
  fi

  authenticate
  rm pubkeys/"${2}".asc
  gpg --export "${2}" > pubkeys/"${2}".asc
  exit
fi

if [ "${1}" = "remove" ] || [ "${1}" = "delete" ]; then
  authenticate
  rm pubkeys/"${2}".asc
  exit
fi