#!/bin/bash
# tbus-info can be used to gather information about tbus installation.

. tbus-global

if [ "${1}" = "-h" ] || [ "${1}" = "--help" ]; then
  echo "tbus-info [option]

Options:
  -h or --help - display this message
  -t or --template-dir - return the directory where templates are kept
  -v or --version - return tbus version
  -c or --check-setup - checks if all tbus dependencies are met, verifies
    tbus configuration and settings
  -d or --daemon - prints out information about all tbus daemons currently in
    use
  -r or --repository or --repo - prints out information about current tbus
    repository"
  exit
fi

if [ "${1}" = "-d" ] || [ "${1}" = "--daemon" ]; then
  transmission-remote --auth $transmissionAuth -tall -l
  #git daemon
  exit
fi

if [ "${1}" = "-r" ] || [ "${1}" = "--repository" ] || [ "${1}" = "--repo" ]; then
  echo "Git status:"
  git status
  echo ""
  # TODO: make it show only information about current repo's torrents
  echo "Torrent status:"
  transmission-remote --auth $transmissionAuth -tall -l
  exit
fi

if [ "${1}" = "-v" ] || [ "${1}" = "--version" ]; then
  echo "$version"
  exit
fi

getVersionString () {
  # Get string number $2 from data passed in $1
  index=0
  for x in ${1}
  do
    if [ $index == ${2} ]; then
      echo "$x"
      break
    fi
  index=$(($index + 1))
  done
}

if [ "${1}" = "-c" ] || [ "${1}" = "--check-setup" ]; then
  echo "Checking system configuration..."
  gitExists=$(which git)
  gpgExists=$(which gpg)
  gpg2Exists=$(which gpg2)
  torrentExists=$(which transmission-cli)
  torrentBackend="transmission-cli"

  configCorrect=true
  statusReport="tbus version "$version"\n"

  # TODO: transform into a function!
  if [ -z "$gitExists" ]; then
    statusReport=$statusReport"git has not been found!"
    configCorrect=false
  else
    gitVersion=$(git --version)
    gitVersion=$(getVersionString "$gitVersion" 2)

    # TODO: parse version numbers, check if git is recent enough (> 1.7.9)
    gitVersionArray=$(echo "$gitVersion" | tr "." " ")
    gitMajor=$(getVersionString "$gitVersionArray" 0)
    gitMinor=$(getVersionString "$gitVersionArray" 1)
    gitPatch=$(getVersionString "$gitVersionArray" 2)
    isOk=false

    if [ $gitMajor == 1 ]; then
      if (( $gitMinor >= 7 )); then
        if [ $gitMinor == 7 ]; then
          if (( $gitPatch >= 9 )); then
            isOk=true
          else
            isOk=false
          fi
        else
          isOk=true
        fi
      fi
    elif (( $gitMajor >= 2 )); then
      isOk=true
    else
      isOk=false
    fi

    statusReport=$statusReport"git version: "$gitVersion

    if [ $isOk == true ]; then
      statusReport=$statusReport", with commit signing support"
    fi
  fi
  statusReport=$statusReport"\n"

  if [ -z "$gpgExists" ]; then
    statusReport=$statusReport"gpg has not been found!"
  else
    gpgVersion=$(gpg --version)
    gpgVersion=$(getVersionString "$gpgVersion" 2)
    statusReport=$statusReport"gpg version: "$gpgVersion
  fi
  statusReport=$statusReport"\n"

  if [ -z "$gpg2Exists" ]; then
    statusReport=$statusReport"gpg2 has not been found!"
  else
    gpg2Version=$(gpg2 --version)
    gpg2Version=$(getVersionString "$gpg2Version" 2)
    statusReport=$statusReport"gpg2 version: "$gpg2Version
  fi
  statusReport=$statusReport"\n"

  if [ -z "$gpgExists" ] && [ -z "$gpg2Exists" ]; then
    statusReport=$statusReport"Can't locate any GPG installation\n"
    configCorrect=false
  fi

  if [ -z "$torrentExists" ]; then
    statusReport=$statusReport"torrent backend has not been found!"
    configCorrect=false
  else
    torrentVersion=$(transmission-cli --version)
    torrentVersion=$(getVersionString "$torrentVersion" 1)
    statusReport=$statusReport"torrent backend version: ("$torrentBackend") "$torrentVersion
  fi
  statusReport=$statusReport"\n\n"

  if [ $configCorrect == true ]; then
    statusReport=$statusReport"All dependencies are there, enjoy using tbus :-)\n"
  else
    statusReport=$statusReport"Some dependencies are missing or not up-to-date\n"
  fi

  printf "$statusReport"

  # TODO: add more checks: whether template dir is there, all tbus methods are
  #       there and - maybe - run all the tests

  exit
fi

if [ "${1}" = "-t" ] || [ "${1}" = "--template-dir" ]; then
  TEMPLATES="templates"

  TEMP=$TBUSDIR/$TEMPLATES
  if [ -d "$TEMP" ]; then
    echo $TEMP
    exit
  fi

  TEMP=$HOME/.tbus/$TEMPLATES
  if [ -d "$TEMP" ]; then
    echo $TEMP
    exit
  fi

  TEMP=$(dirname $(which tbus))/$TEMPLATES
  if [ -d "$TEMP" ]; then
    echo $TEMP
    exit
  fi

  TEMP=$PWD/$TEMPLATES
  if [ -d "$TEMP" ]; then
    echo $TEMP
    exit
  fi

  echo "Could not locate template directory. Please check your tbus installation."
  echo "tbus looks for templates in \$TBUSDIR/templates, \$HOME/.tbus/templates,"
  echo "\$PWD/templates and in directory where tbus script resides."
  exit 1
fi
