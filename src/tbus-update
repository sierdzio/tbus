#!/bin/bash
# tbus-update script

. tbus-global

help () {
  echo "tbus-update - gathers and verifies update information from torrent swarm

  tbus-update connects to the peer swarm of the root torrent file and downloads
  update information from several peers. That data is then verified using GPG,
  and if tbus decides that the update is legitimate, the local repository is
  updated. Otherwise, all changes are discarded.

  Once the update is complete, you can run tbus-upgrade to install all updates,
  or tbus-install to select new packages to install.
"
}

if [ "${1}" = "-h" ] || [ "${1}" = "--help" ]; then
  help
  exit
fi

# TODO: oh my, that's a lot of work :D
# 1. Check if the daemon is already running. If not, start it and wait
# for the swarm to populate.
# 2. Select some peers at random (first try. Implement more clever logic later.
# for example, peers could send 'update ping' signals with their repo timestamp
# to ease the process).
# 3. Download git repository updates from those peers (how?).
# 4. Verify commit signatures for those new remotes.
# 5. For verified remotes, check if the update info matches (is the same). This
# could be quite error-prone, think of some better algorithm.
# 6. Select one good remote, merge it.
# 7. Clean up - remove remotes, git prune, etc.
# 8. Display status information to the user.

# Run git-daemon and transmission-daemon
tbus-start

# TODO: wait a bit, so that the swarm does populate
sleep 4s

# TODO: get root torrent hash
rootTorrentHash=$(transmission-show .root.torrent | grep "Hash:")
rootTorrentHash=${rootTorrentHash#"  Hash: "}
debug "$rootTorrentHash"

# Get peer list from the server
# TODO: make sure we are connecting to localhost
peerListRaw=$(transmission-remote "$torrentControlAddress" --info-peers --torrent "$rootTorrentHash")
debug "$peerListRaw"

# TODO: sanitize the peer list

# TODO: run through the list, select several peers according to some algorithm
# (can be random), connect to their git repos, verify them, then update
