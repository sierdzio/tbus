#!/bin/bash
# tbus-update script

. tbus-global

help () {
  echo "tbus-update - gathers and verifies update information from torrent swarm

  tbus-update connects to the peer swarm of the root torrent file and downloads
  update information from several peers. That data is then verified using GPG,
  and if tbus decides that the update is legitimate, the local repository is
  updated. Otherwise, all changes are discarded.

  Once the update is complete, you can run tbus-upgrade to install all updates,
  or tbus-install to select new packages to install.
"
}

if [ "${1}" = "-h" ] || [ "${1}" = "--help" ]; then
  help
  exit
fi

# TODO: oh my, that's a lot of work :D
# 1. Check if the daemon is already running. If not, start it and wait
# for the swarm to populate.
# 2. Select some peers at random (first try. Implement more clever logic later.
# for example, peers could send 'update ping' signals with their repo timestamp
# to ease the process).
# 3. Download git repository updates from those peers (how?).
# 4. Verify commit signatures for those new remotes.
# 5. For verified remotes, check if the update info matches (is the same). This
# could be quite error-prone, think of some better algorithm.
# 6. Select one good remote, merge it.
# 7. Clean up - remove remotes, git prune, etc.
# 8. Display status information to the user.

# Run git-daemon and transmission-daemon
debug "Starting the tbus daemon"
tbus-start $debugFlag

# TODO: wait a bit, so that the swarm does populate
debug "Waiting for peer swarm to populate"
sleep 8s

# TODO: get root torrent hash
debug "Getting the hash of the root torrent file: "
rootTorrentHash=$(transmission-show .root.torrent | grep "Hash:")
rootTorrentHash=${rootTorrentHash#"  Hash: "}
debug "$rootTorrentHash"

# Get peer list from the server
# TODO: make sure we are connecting to localhost
debug "Parse the peer list"
peerListRaw=$(transmission-remote --torrent $rootTorrentHash --auth $transmissionAuth --info-peers)
# debug "$peerListRaw"

input=$(echo "$peerListRaw" |  tr '[\n]' '[;]')
input=${input//;/ ; }

line=0
column=0
peerList[0]=""
for x in $input; do
  #echo "Line: "$line", column: "$column", data: "$x
  if [ $line != 0 ]; then
    if [ $column == 0 ]; then
      debug $line": "$x
      # TODO: add peers to an array
      peerList[$line]=$x
    fi

    if [ $x == ";" ]; then
      column=0
    else
      column=$(($column + 1))
    fi
  fi

  if [ $x == ";" ]; then
    line=$(($line + 1))
  fi
done

# TODO: run through the list, select several peers according to some algorithm
# (can be random), connect to their git repos, verify them, then update
remotedPeers[0]=""
index=1
for peer in $peerList; do
  if [ $index = 5 ] || [ $index > ${#peerList[@]} ]; then
    break
  fi

  # Try calling the peer and adding him as a remote
  # TODO: decide about naming
  git remote add --fetch $peer git://$peer/

  if [ "$?" = "0" ]; then
    debug "Added peer: "$peer
    remotedPeers[$index]=$peer
    index=$(($index + 1))
  fi
done

# TODO: inspect the remotes
currentHead=$(git log -1 --pretty=format:%H --no-abbrev-commit --show-signature)
debug "Current HEAD revision is: "$currentHead

# --show-signature is there to verify GPG. This needs to be worked upon. TODO.

for peer in $remotedPeers; do
  currentRemoteHead=$(git log origin/master -1 --pretty=format:%H --no-abbrev-commit --show-signature)

  if [ "$currentHead" != "$currentRemoteHead" ]; then
    debug "The remote ("$peer") has different HEAD, we need to investigate"
  fi
done
